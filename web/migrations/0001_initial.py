# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2018-05-10 10:01
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name=b'Course name')),
                ('shortname', models.CharField(max_length=100, verbose_name=b'Short name')),
                ('description', models.TextField(blank=True, null=True, verbose_name=b'Description')),
                ('usga', models.BooleanField(default=False, verbose_name=b'usga handicap index')),
            ],
        ),
        migrations.CreateModel(
            name='currenthandicap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handicap', models.DecimalField(decimal_places=1, max_digits=3, verbose_name=b'Handicap index')),
                ('handicaptype', models.CharField(choices=[(b'L', b'Local handicap'), (b'M', b'Modified by the Committee'), (b'N', b'Nine hole'), (b'NL', b'Nine hole local'), (b'R', b'Automatically reduced'), (b'SL', b'Short Course'), (b'WD', b'Withdrawn')], default=b'L', max_length=2, verbose_name=b'Handicap type')),
            ],
        ),
        migrations.CreateModel(
            name='Draw',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.IntegerField(default=1, verbose_name=b'Tournament Day Number')),
                ('groupsize', models.IntegerField(verbose_name=b'Group Size')),
                ('interval', models.IntegerField(verbose_name=b'Interval between groups')),
                ('done', models.BooleanField(default=False, verbose_name=b'Done')),
                ('drawlist', models.FileField(blank=True, null=True, upload_to=b'draws/', verbose_name=b'Draw file')),
            ],
        ),
        migrations.CreateModel(
            name='Handicap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handicap', models.DecimalField(decimal_places=1, max_digits=3, verbose_name=b'Handicap index')),
                ('valfrom', models.DateField(verbose_name=b'Valid from')),
                ('valto', models.DateField(verbose_name=b'Valid to')),
            ],
        ),
        migrations.CreateModel(
            name='Hole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(verbose_name=b'Hole Number')),
                ('par', models.IntegerField(verbose_name=b'Par')),
                ('strokeindex', models.IntegerField(verbose_name=b'Stroke Index')),
                ('yardage', models.IntegerField(verbose_name=b'Yardage')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Homeclub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='web.Course', verbose_name=b'Course')),
            ],
        ),
        migrations.CreateModel(
            name='Matchentry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, choices=[(b'A', b'A'), (b'B', b'B'), (b'C', b'C'), (b'D', b'D'), (b'E', b'A&B girls'), (b'F', b'C girls')], max_length=1, null=True, verbose_name=b'category')),
                ('round', models.IntegerField(default=1, verbose_name=b'Round')),
            ],
            options={
                'ordering': ('player',),
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hide', models.BooleanField(default=True, verbose_name=b'Hide')),
            ],
            options={
                'ordering': ['player'],
            },
        ),
        migrations.CreateModel(
            name='Membergroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name=b'Name')),
                ('members', models.ManyToManyField(to='web.Member', verbose_name=b'Members')),
            ],
        ),
        migrations.CreateModel(
            name='Monthhandicap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handicap', models.DecimalField(decimal_places=1, max_digits=3, verbose_name=b'Handicap index')),
                ('handicaptype', models.CharField(choices=[(b'L', b'Local handicap'), (b'M', b'Modified by the Committee'), (b'N', b'Nine hole'), (b'NL', b'Nine hole local'), (b'R', b'Automatically reduced'), (b'SL', b'Short Course'), (b'WD', b'Withdrawn')], default=b'L', max_length=2, verbose_name=b'Handicap type')),
                ('month', models.DateField(verbose_name=b'Date')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Member', unique=True, verbose_name=b'Member')),
            ],
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='p1', to='web.Matchentry', verbose_name=b'Partner 1')),
                ('member2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='p2', to='web.Matchentry', verbose_name=b'Partner 2')),
            ],
        ),
        migrations.CreateModel(
            name='Partner3',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='p31', to='web.Matchentry', verbose_name=b'Partner3 1')),
                ('member2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='p32', to='web.Matchentry', verbose_name=b'Partner3 2')),
                ('member3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='p33', to='web.Matchentry', verbose_name=b'Partner3 3')),
            ],
        ),
        migrations.CreateModel(
            name='Partnership3trophy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name=b'Trophy Name')),
                ('format', models.CharField(choices=[(b'G3', b'Gross'), (b'N3', b'Nett')], max_length=2, verbose_name=b'Format')),
                ('handicapmax', models.IntegerField(verbose_name=b'Handicap max')),
                ('handicapmin', models.IntegerField(verbose_name=b'Handicap min')),
            ],
        ),
        migrations.CreateModel(
            name='Partnershiptrophy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name=b'Trophy Name')),
                ('format', models.CharField(choices=[(b'GR', b'Gross bestball bogey'), (b'NT', b'Nett bestball bogey'), (b'MR', b'Gross bestball medal round'), (b'MT', b'Nett bestball medal round'), (b'SC', b'Nett scramble'), (b'SG', b'Gross scramble'), (b'CS', b'Combined stableford'), (b'GC', b'Gross combined stableford'), (b'NS', b'Nett Switch'), (b'GS', b'Gross Switch'), (b'NM', b'Nett Multiply'), (b'GM', b'Gross Multiply'), (b'SX', b'Nett scramble stableford - 50\\%'), (b'SY', b'Nett scramble stableford - 40\\%'), (b'SZ', b'Nett scramble stableford - 30\\%')], max_length=2, verbose_name=b'Format')),
                ('handicapmax', models.IntegerField(verbose_name=b'Handicap max')),
                ('handicapmin', models.IntegerField(verbose_name=b'Handicap min')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name=b'First Name or initials')),
                ('last_name', models.CharField(max_length=100, verbose_name=b'Last Name')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=b'photos/', verbose_name=b'Photo')),
                ('membno', models.CharField(blank=True, max_length=20, null=True, verbose_name=b'Membership number')),
                ('homeclub', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Course', verbose_name=b'Home Course')),
            ],
            options={
                'ordering': ['last_name'],
            },
        ),
        migrations.CreateModel(
            name='Practiceround',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rounddate', models.DateField(verbose_name=b'Date')),
                ('marker', models.CharField(max_length=150, verbose_name=b'Marker')),
                ('scoretype', models.CharField(choices=[(b'N', b'Normal'), (b'A', b'Away'), (b'AI', b'Away Internet'), (b'P', b'Penalty'), (b'T', b'Tournament'), (b'TI', b'Tournament Internet'), (b'C', b'Combined nines')], max_length=2, verbose_name=b'Score type')),
                ('accepted', models.BooleanField(default=False, verbose_name=b'Accepted')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Member', verbose_name=b'Member')),
            ],
        ),
        migrations.CreateModel(
            name='Pscore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, default=0, null=True, verbose_name=b'Score')),
                ('hole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Hole', verbose_name=b'Hole')),
                ('practiceround', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Practiceround', verbose_name=b'Practice round')),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startdate', models.DateField(verbose_name=b'Start Date')),
                ('num', models.IntegerField(verbose_name=b'Round number')),
            ],
            options={
                'ordering': ['num'],
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, default=0, null=True, verbose_name=b'Score')),
                ('hole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Hole', verbose_name=b'Hole')),
                ('matchentry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchentries', to='web.Matchentry', verbose_name=b'Match entry')),
            ],
        ),
        migrations.CreateModel(
            name='Scoringrecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scoredate', models.DateField(verbose_name=b'Date')),
                ('score', models.IntegerField(verbose_name=b'Score')),
                ('scoretype', models.CharField(choices=[(b'N', b'Normal'), (b'A', b'Away'), (b'AI', b'Away Internet'), (b'P', b'Penalty'), (b'T', b'Tournament'), (b'TI', b'Tournament Internet'), (b'C', b'Combined nines')], max_length=2, verbose_name=b'Score type')),
                ('sloperating', models.IntegerField(verbose_name=b'Slope rating')),
                ('courserating', models.DecimalField(decimal_places=1, max_digits=3, verbose_name=b'Course rating')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Member', verbose_name=b'Member')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name=b'Team Name')),
                ('members', models.ManyToManyField(to='web.Matchentry', verbose_name=b'Matchentry')),
            ],
        ),
        migrations.CreateModel(
            name='Teamtrophy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name=b'Team Trophy')),
                ('handlimit', models.PositiveIntegerField(verbose_name=b'Max Handicap')),
                ('best', models.PositiveIntegerField(verbose_name=b'No of best scores')),
                ('format', models.CharField(choices=[(b'GG', b'GKD Gross'), (b'GN', b'GKD Nett'), (b'CG', b'Combined stableford Gross'), (b'CN', b'Combined stableford Nett'), (b'MG', b'Combined medal round Gross'), (b'MN', b'Combined medal round Nett')], max_length=3, verbose_name=b'Format')),
            ],
        ),
        migrations.CreateModel(
            name='Tee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colour', models.CharField(choices=[(b'RD', b'Red'), (b'BL', b'Black'), (b'WT', b'White'), (b'BU', b'Blue'), (b'YL', b'Yellow')], max_length=2, verbose_name=b'Tee colour')),
                ('description', models.CharField(max_length=100, verbose_name=b'Description')),
                ('sloperating', models.IntegerField(verbose_name=b'Slope Rating')),
                ('courserating', models.DecimalField(decimal_places=1, max_digits=4, verbose_name=b'Course Rating')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Course', verbose_name=b'Course')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Teeoff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hole', models.IntegerField(verbose_name=b'Starting hole')),
                ('starttime', models.TimeField(verbose_name=b'Starting time')),
                ('fourballs', models.IntegerField(blank=True, null=True, verbose_name=b'No of fourballs')),
                ('threeballs', models.IntegerField(blank=True, null=True, verbose_name=b'No of threeballs')),
                ('twoballs', models.IntegerField(blank=True, null=True, verbose_name=b'No of twoballs')),
                ('singles', models.IntegerField(blank=True, null=True, verbose_name=b'No of singles')),
                ('priority', models.IntegerField(verbose_name=b'Priority')),
                ('draw', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Draw', verbose_name=b'Draw')),
            ],
            options={
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='Tempreg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30, unique=True, verbose_name=b'User Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name=b'Email Address')),
                ('date', models.DateField(default=datetime.datetime.now, editable=False, verbose_name=b'Date')),
                ('code', models.CharField(blank=True, default=b'123', editable=False, max_length=100, null=True, verbose_name=b'Code')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startdate', models.DateField(unique=True, verbose_name=b'Start Date')),
                ('rounds', models.IntegerField(verbose_name=b'Number of rounds')),
                ('closed', models.BooleanField(default=False, verbose_name=b'Results Declared')),
                ('kind', models.CharField(choices=[(b'IN', b'Individual'), (b'PT', b'Partnership'), (b'TM', b'Team'), (b'P3', b'3 ball Partnership')], max_length=2, verbose_name=b'Type of tournament')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Course', verbose_name=b'Course')),
            ],
        ),
        migrations.CreateModel(
            name='Trophy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name=b'Trophy Name')),
                ('format', models.CharField(choices=[(b'MR', b'Medal Round'), (b'GM', b'Gross Medal Round'), (b'ST', b'Stableford'), (b'AD', b'Addleford'), (b'AG', b'Against Bogey'), (b'GS', b'Gross Stableford'), (b'GG', b'Gross Bogey'), (b'MB', b'Modified Bogey'), (b'GB', b'Gross Modified Bogey'), (b'VL', b'Dr Velappan'), (b'A', b'A'), (b'B', b'B'), (b'C', b'C'), (b'D', b'D'), (b'AB', b'A & B'), (b'BG', b'A & B girls'), (b'CG', b'C girls')], max_length=2, verbose_name=b'Format')),
                ('handicapmax', models.IntegerField(verbose_name=b'Handicap max')),
                ('handicapmin', models.IntegerField(verbose_name=b'Handicap min')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Trophyentry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matchentry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentries', to='web.Matchentry', verbose_name=b'Match entry')),
                ('trophy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trophies', to='web.Trophy', verbose_name=b'Trophy')),
            ],
        ),
        migrations.AddField(
            model_name='teamtrophy',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament'),
        ),
        migrations.AddField(
            model_name='team',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament'),
        ),
        migrations.AddField(
            model_name='scoringrecord',
            name='tee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tee', verbose_name=b'Tee'),
        ),
        migrations.AddField(
            model_name='round',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament'),
        ),
        migrations.AddField(
            model_name='practiceround',
            name='tee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tee', verbose_name=b'Tee'),
        ),
        migrations.AddField(
            model_name='player',
            name='tee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tee', verbose_name=b'Tee'),
        ),
        migrations.AddField(
            model_name='partnershiptrophy',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament'),
        ),
        migrations.AddField(
            model_name='partnership3trophy',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament'),
        ),
        migrations.AddField(
            model_name='partner3',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament'),
        ),
        migrations.AddField(
            model_name='partner',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament'),
        ),
        migrations.AddField(
            model_name='member',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Player', unique=True, verbose_name=b'Member'),
        ),
        migrations.AddField(
            model_name='matchentry',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Player', verbose_name=b'Player'),
        ),
        migrations.AddField(
            model_name='matchentry',
            name='tee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tee', verbose_name=b'Tee'),
        ),
        migrations.AddField(
            model_name='matchentry',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament'),
        ),
        migrations.AddField(
            model_name='hole',
            name='tee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tee', verbose_name=b'Tee'),
        ),
        migrations.AddField(
            model_name='handicap',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Player', verbose_name=b'Player'),
        ),
        migrations.AddField(
            model_name='draw',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Tournament', verbose_name=b'Tournament Name'),
        ),
        migrations.AddField(
            model_name='currenthandicap',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Member', unique=True, verbose_name=b'Member'),
        ),
        migrations.AlterUniqueTogether(
            name='trophy',
            unique_together=set([('name', 'tournament')]),
        ),
        migrations.AlterUniqueTogether(
            name='teeoff',
            unique_together=set([('draw', 'hole', 'starttime')]),
        ),
        migrations.AlterUniqueTogether(
            name='tee',
            unique_together=set([('course', 'colour')]),
        ),
        migrations.AlterUniqueTogether(
            name='scoringrecord',
            unique_together=set([('member', 'scoredate')]),
        ),
        migrations.AlterUniqueTogether(
            name='score',
            unique_together=set([('matchentry', 'hole')]),
        ),
        migrations.AlterUniqueTogether(
            name='round',
            unique_together=set([('tournament', 'num')]),
        ),
        migrations.AlterUniqueTogether(
            name='pscore',
            unique_together=set([('practiceround', 'hole')]),
        ),
        migrations.AlterUniqueTogether(
            name='practiceround',
            unique_together=set([('rounddate', 'member')]),
        ),
        migrations.AlterUniqueTogether(
            name='player',
            unique_together=set([('first_name', 'last_name')]),
        ),
        migrations.AlterUniqueTogether(
            name='partnershiptrophy',
            unique_together=set([('name', 'tournament')]),
        ),
        migrations.AlterUniqueTogether(
            name='partnership3trophy',
            unique_together=set([('name', 'tournament')]),
        ),
        migrations.AlterUniqueTogether(
            name='matchentry',
            unique_together=set([('tournament', 'player', 'round')]),
        ),
        migrations.AlterUniqueTogether(
            name='hole',
            unique_together=set([('tee', 'number')]),
        ),
        migrations.AlterUniqueTogether(
            name='handicap',
            unique_together=set([('player', 'valto')]),
        ),
        migrations.AlterUniqueTogether(
            name='draw',
            unique_together=set([('tournament', 'day')]),
        ),
    ]
